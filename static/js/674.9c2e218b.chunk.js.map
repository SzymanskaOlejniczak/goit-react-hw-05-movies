{"version":3,"file":"static/js/674.9c2e218b.chunk.js","mappings":"mLACA,EAAuB,qB,SCgBvB,MAdA,WACI,OACI,SAAC,KAAD,CACIA,OAAO,KACPC,MAAM,KACNC,MAAM,iBACNC,UAAU,eACVC,OAAO,OACPC,aAAc,CAAC,EACfC,aAAcC,EACdC,SAAS,GAGpB,C,0ECfD,EAA6B,+BAA7B,EAA+E,qC,SC6B/E,EA1BmB,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,eAAIC,UAAWL,EAAf,SACGE,GACCA,EAAMI,KAAI,SAAAC,GAAI,OACZ,eAAIF,UAAWL,EAAf,UACE,SAAC,KAAD,CAAMQ,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMR,GAA/C,SACGI,EAAKK,SAF8BL,EAAKE,GADjC,KASrB,C,8IClBD,EAAwB,wB,SCkCxB,EA5BiB,WACf,OAA0BI,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAkB,mCAAG,2FACzBF,GAAW,GADc,kBAGKG,EAAAA,EAAAA,eAHL,OAGjBC,EAHiB,OAIvBN,EAASM,GAJc,gDAMvBC,QAAQC,IAAR,MANuB,yBAQvBN,GAAW,GARY,4EAAH,qDAWxBE,GACD,GAAE,KAGD,6BACE,eAAIb,UAAWL,EAAf,4BACCE,IAAS,SAACqB,EAAA,EAAD,CAAYrB,MAAOA,IAC5Ba,IAAW,SAACS,EAAA,EAAD,MAGjB,C,8DC/BDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEVC,EAAY,mCAAG,oGACIF,EAAAA,EAAAA,IAAA,qCAAwCC,IAD5C,cACbE,EADa,yBAEZA,EAASC,KAAKC,SAFF,2CAAH,qDAKZC,EAAoB,mCAAG,WAAMC,GAAN,uFACJP,EAAAA,EAAAA,IAAA,+BACGC,EADH,4DAC8DM,IAF1D,cACrBJ,EADqB,yBAIpBA,EAASC,KAAKC,SAJM,2CAAH,sDAOpBG,EAAc,mCAAG,WAAMC,GAAN,uFACET,EAAAA,EAAAA,IAAA,gBACZS,EADY,oBACOR,EADP,oBADF,cACfE,EADe,yBAIdA,EAASC,MAJK,2CAAH,sDAOdM,EAAW,mCAAG,WAAMD,GAAN,uFACKT,EAAAA,EAAAA,IAAA,gBACZS,EADY,4BACeR,EADf,oBADL,cACZE,EADY,yBAIXA,EAASC,KAAKO,MAJH,2CAAH,sDAOXC,EAAY,mCAAG,WAAMH,GAAN,uFACIT,EAAAA,EAAAA,IAAA,gBACZS,EADY,4BACeR,EADf,2BADJ,cACbE,EADa,yBAIZA,EAASC,KAAKC,SAJF,2CAAH,sDAOVX,EAAM,CACVQ,aAAAA,EACAI,qBAAAA,EACAE,eAAAA,EACAE,YAAAA,EACAE,aAAAA,GAGF,K","sources":["webpack://goit-react-hw-05-movies/./src/components/Loader/Loader.module.css?d03f","components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/pages/EditorList/EditorList.module.css?6fe9","pages/EditorList/EditorList.jsx","webpack://goit-react-hw-05-movies/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.jsx","services/api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"grid\":\"Loader_grid__69Pix\"};","import { Grid } from  'react-loader-spinner'\nimport s from './Loader.module.css'\n\nfunction Loader() {\n    return (\n        <Grid\n            height=\"80\"\n            width=\"80\"\n            color=\"rgb(255,165,0)\"\n            ariaLabel=\"grid-loading\"\n            radius=\"12.5\"\n            wrapperStyle={{}}\n            wrapperClass={s.grid}\n            visible={true}\n        />\n    )  \n} \nexport default Loader;","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"EditorList_moviesList__2tPqN\",\"moviesList__item\":\"EditorList_moviesList__item__IEAje\"};","import { Link, useLocation } from 'react-router-dom';\nimport s from './EditorList.module.css'\nimport PropTypes from 'prop-types';\n\nconst EditorList = ({ films }) => {\n  const location = useLocation();\n\n  return (\n    <ul className={s.moviesList}>\n      {films &&\n        films.map(film => (\n          <li className={s.moviesList__item} key={film.id}>\n            <Link to={`/movies/${film.id}`} state={{ from: location }}>\n              {film.title}\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"HomePage_title__UFLA3\"};","import React, { useEffect, useState } from 'react';\nimport EditorList from '../EditorList/EditorList';\nimport api from '../../services/api';\nimport Loader from 'components/Loader/Loader';\nimport s from './HomePage.module.css';\n\n\nconst HomePage = () => {\n  const [films, setFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n\n  useEffect(() => {\n    const FetchTrendingFilms = async () => {\n      setLoading(true);\n      try {\n        const trendingFilms = await api.fetchPopular();\n        setFilms(trendingFilms);\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    FetchTrendingFilms();\n  }, []);\n\n  return (\n    <main>\n      <h1 className={s.title}>Trending today</h1>\n      {films && <EditorList films={films} />}\n      {loading && <Loader />}\n    </main>\n  );\n};\n\nexport default HomePage;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '0d78144943c3507b0c4f9f0eca5bf958';\n\nconst fetchPopular = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nconst fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nconst fetchMovieById = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nconst fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n  \n  const api = {\n    fetchPopular,\n    fetchSearchByKeyword,\n    fetchMovieById,\n    fetchActors,\n    fetchReviews,\n  };\n  \n  export default api;"],"names":["height","width","color","ariaLabel","radius","wrapperStyle","wrapperClass","s","visible","films","location","useLocation","className","map","film","to","id","state","from","title","useState","setFilms","loading","setLoading","useEffect","FetchTrendingFilms","api","trendingFilms","console","log","EditorList","Loader","axios","API_KEY","fetchPopular","response","data","results","fetchSearchByKeyword","keyword","fetchMovieById","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}